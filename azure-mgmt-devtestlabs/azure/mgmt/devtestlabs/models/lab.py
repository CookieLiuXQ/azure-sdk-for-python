# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class Lab(Model):
    """A lab.

    :param default_storage_account: The lab's default storage account.
    :type default_storage_account: str
    :param artifacts_storage_account: The artifact storage account of the lab.
    :type artifacts_storage_account: str
    :param storage_accounts: The storage accounts of the lab.
    :type storage_accounts: list[str]
    :param vault_name: The name of the key vault of the lab.
    :type vault_name: str
    :param lab_storage_type: The type of the lab storage. Possible values
     include: 'Standard', 'Premium'
    :type lab_storage_type: str or
     ~azure.mgmt.devtestlabs.models.LabStorageType
    :param default_virtual_network_id: The default virtual network identifier
     of the lab.
    :type default_virtual_network_id: str
    :param created_date: The creation date of the lab.
    :type created_date: datetime
    :param provisioning_state: The provisioning status of the resource.
    :type provisioning_state: str
    :param id: The identifier of the resource.
    :type id: str
    :param name: The name of the resource.
    :type name: str
    :param type: The type of the resource.
    :type type: str
    :param location: The location of the resource.
    :type location: str
    :param tags: The tags of the resource.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'default_storage_account': {'key': 'properties.defaultStorageAccount', 'type': 'str'},
        'artifacts_storage_account': {'key': 'properties.artifactsStorageAccount', 'type': 'str'},
        'storage_accounts': {'key': 'properties.storageAccounts', 'type': '[str]'},
        'vault_name': {'key': 'properties.vaultName', 'type': 'str'},
        'lab_storage_type': {'key': 'properties.labStorageType', 'type': 'str'},
        'default_virtual_network_id': {'key': 'properties.defaultVirtualNetworkId', 'type': 'str'},
        'created_date': {'key': 'properties.createdDate', 'type': 'iso-8601'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(Lab, self).__init__(**kwargs)
        self.default_storage_account = kwargs.get('default_storage_account', None)
        self.artifacts_storage_account = kwargs.get('artifacts_storage_account', None)
        self.storage_accounts = kwargs.get('storage_accounts', None)
        self.vault_name = kwargs.get('vault_name', None)
        self.lab_storage_type = kwargs.get('lab_storage_type', None)
        self.default_virtual_network_id = kwargs.get('default_virtual_network_id', None)
        self.created_date = kwargs.get('created_date', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.type = kwargs.get('type', None)
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
